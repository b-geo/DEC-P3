name: Infrastructure and Docker Deployment

on:
  # Can be manually triggered
  workflow_dispatch: {}
  push:
    paths:
      - 'orchestration/**'
      - 'presentation/streaming_dashboard/**'
      - 'infra/**'
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Save Terraform outputs
        run: terraform output -json > tf_outputs.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: infra/tf_outputs.json

  build-and-push:
    needs: terraform
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: infra/

      - name: Set ECR URLs from outputs
        id: tf_outputs
        run: |
          ORCHESTRATION_URL=$(jq -r '.orchestration_repo_url.value' infra/tf_outputs.json)
          DASHBOARD_URL=$(jq -r '.dashboard_repo_url.value' infra/tf_outputs.json)
          echo "orchestration_url=$ORCHESTRATION_URL" >> "$GITHUB_OUTPUT"
          echo "dashboard_url=$DASHBOARD_URL" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Detect changed paths
        id: detect_changes
        run: |
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            echo "Changed files:"
            echo "$CHANGED_FILES"
            echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
            echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"

            echo "orchestration_changed=false" >> "$GITHUB_OUTPUT"
            echo "dashboard_changed=false" >> "$GITHUB_OUTPUT"

            if echo "$CHANGED_FILES" | grep -q "^orchestration/"; then
            echo "orchestration_changed=true" >> "$GITHUB_OUTPUT"
            fi

            if echo "$CHANGED_FILES" | grep -q "^presentation/streaming_dashboard/"; then
            echo "dashboard_changed=true" >> "$GITHUB_OUTPUT"
            fi

      - name: Build and push orchestration image
        if: steps.detect_changes.outputs.orchestration_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf_outputs.outputs.orchestration_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd orchestration
          docker build --platform=linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and push dashboard image
        if: steps.detect_changes.outputs.dashboard_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf_outputs.outputs.dashboard_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd presentation/streaming_dashboard
          docker build --platform=linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Update Terraform Task Definitions
        working-directory: infra
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="image_tag=${{ github.sha }}" \
            -target=aws_ecs_task_definition.pipeline_orchestration \
            -target=aws_ecs_task_definition.race_dashboard